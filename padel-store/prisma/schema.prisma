// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================
// Enums
// ==========================

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum Direction {
  DEBIT
  CREDIT
}

enum PaymentMethod {
  CASH
  CARD
  ONLINE
  ACCOUNT // Accounts Receivable / On Account
}

enum SaleStatus {
  PENDING
  PAID
  REFUNDED
  CANCELLED
}

enum Channel {
  STORE
  ONLINE
}

enum LocationType {
  STORE
  WAREHOUSE
  ONLINE
}

enum PurchaseOrderStatus {
  DRAFT
  OPEN
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

// ==========================
// Core Product & Inventory
// ==========================

model Product {
  id            String           @id @default(cuid())
  sku           String           @unique
  name          String
  description   String?
  brand         String?
  costPrice     Decimal          @db.Decimal(18, 6)
  sellingPrice  Decimal          @db.Decimal(18, 6)
  taxRate       Decimal          @db.Decimal(7, 6) @default(0) // e.g., 0.21 for 21%
  active        Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  variants      ProductVariant[]
}

model ProductVariant {
  id            String      @id @default(cuid())
  productId     String
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku           String      @unique
  barcode       String?
  attributes    Json?
  active        Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  inventory     Inventory[]
  saleItems     SaleItem[]
  poItems       PurchaseOrderItem[]
}

model Location {
  id        String       @id @default(cuid())
  code      String       @unique
  name      String
  type      LocationType @default(STORE)
  active    Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  inventory Inventory[]
  sales     Sale[]
  pos       PurchaseOrder[]
}

model Inventory {
  id         String   @id @default(cuid())
  variantId  String
  locationId String
  variant    ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  location   Location       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  quantity   Int      @default(0)
  reorderLevel Int    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([variantId, locationId])
}

// ==========================
// Parties
// ==========================

model Customer {
  id         String    @id @default(cuid())
  email      String?   @unique
  phone      String?
  firstName  String?
  lastName   String?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  sales      Sale[]
}

model Vendor {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pos       PurchaseOrder[]
}

// ==========================
// Sales
// ==========================

model Sale {
  id            String        @id @default(cuid())
  date          DateTime      @default(now())
  customerId    String?
  customer      Customer?     @relation(fields: [customerId], references: [id])
  locationId    String
  location      Location      @relation(fields: [locationId], references: [id])
  status        SaleStatus    @default(PAID)
  channel       Channel       @default(STORE)
  paymentMethod PaymentMethod @default(CASH)
  netAmount     Decimal       @db.Decimal(18, 6) @default(0)
  taxAmount     Decimal       @db.Decimal(18, 6) @default(0)
  totalAmount   Decimal       @db.Decimal(18, 6) @default(0)
  cogsAmount    Decimal       @db.Decimal(18, 6) @default(0)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  items         SaleItem[]
  journalEntries JournalEntry[]
}

model SaleItem {
  id              String         @id @default(cuid())
  saleId          String
  sale            Sale           @relation(fields: [saleId], references: [id], onDelete: Cascade)
  variantId       String
  variant         ProductVariant @relation(fields: [variantId], references: [id])
  quantity        Int
  priceAtSale     Decimal        @db.Decimal(18, 6) // unit price before tax
  costAtSale      Decimal        @db.Decimal(18, 6) // unit cost at time of sale
  taxRateAtSale   Decimal        @db.Decimal(7, 6)
  taxAmountAtSale Decimal        @db.Decimal(18, 6)
}

// ==========================
// Procurement
// ==========================

model PurchaseOrder {
  id           String               @id @default(cuid())
  vendorId     String
  vendor       Vendor               @relation(fields: [vendorId], references: [id])
  locationId   String
  location     Location             @relation(fields: [locationId], references: [id])
  status       PurchaseOrderStatus  @default(DRAFT)
  expectedDate DateTime?
  receivedDate DateTime?
  totalAmount  Decimal              @db.Decimal(18, 6) @default(0)
  notes        String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  items        PurchaseOrderItem[]
  journalEntries JournalEntry[]
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  variantId       String
  variant         ProductVariant @relation(fields: [variantId], references: [id])
  quantity        Int
  unitCost        Decimal       @db.Decimal(18, 6)
  receivedQuantity Int          @default(0)
}

// ==========================
// Accounting
// ==========================

model ChartOfAccounts {
  id        String      @id @default(cuid())
  code      String      @unique
  name      String
  type      AccountType
  systemKey String?     @unique
  active    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  transactions Transaction[]
}

model JournalEntry {
  id           String        @id @default(cuid())
  date         DateTime      @default(now())
  memo         String?
  saleId       String?
  sale         Sale?         @relation(fields: [saleId], references: [id])
  purchaseOrderId String?
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  transactions Transaction[]
}

model Transaction {
  id             String           @id @default(cuid())
  journalEntryId String
  journalEntry   JournalEntry     @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  accountId      String
  account        ChartOfAccounts  @relation(fields: [accountId], references: [id])
  amount         Decimal          @db.Decimal(18, 6)
  direction      Direction
  meta           Json?
}
